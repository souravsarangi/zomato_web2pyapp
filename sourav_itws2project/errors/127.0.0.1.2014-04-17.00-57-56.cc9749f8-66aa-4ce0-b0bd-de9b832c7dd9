(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'None'"
p3
sS'layer'
p4
S'/home/sourav/web2py/applications/nikhil/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\n#db(db.constants.id>0).insert(t="")\ndef index():\n    \n    \n    flag=0\n    \n    \n    if request.vars: \n    \tj=request.vars.text\n\n    \tj=j.lower()\n    \tquery = (db.general_info.fname.lower()==j) | (db.general_info.city.lower()==j)\n\tmessage = db(query).select(orderby=db.general_info.Ratings)\n\n\t\n    \tif len(message)>0:\n\t\tflag=2\n\t\t\n\t\n    \tif flag==2:\n\t\tflag=0\n\t\t\n\t\treturn dict(message=message)\n\t\t\t\t\n\n    \telse:\n\t\t\t\treturn dict(message="Entry not available")\n    else:\n\treturn dict(message="")\n\n\n\n\ndef index3():\n        return dict()\n\ndef get_search2():\n        textx=request.vars[\'x\'].lower()\n        texty=request.vars[\'y\'].lower()\n        rows=db((db.theaters.fname.lower().startswith(textx)) & (db.theaters.city.lower().startswith(texty))).select(orderby=db.theaters.price_range)\n        s=\'{"fname":[\'\n\tfor row in rows:\n\t    print row\n            s=s+\'"\'+row[\'fname\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\ts=s+\'"id":[\'\n\tfor row in rows:\n            s=s+\'"\'+str(row[\'id\'])+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\t\n\ts=s+\'"city":[\'\n\tfor row in rows:\n            s=s+\'"\'+row[\'city\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\t\n\ts=s+\'"Address":[\'\n\tfor row in rows:\n            s=s+\'"\'+row[\'Address\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\t\n\ts=s+\'"price_range":[\'\n\tfor row in rows:\n            s=s+\'"\'+row[\'price_range\']+\'"\'+","\n\ts=s[0:-1]+\']}\'\n \n        if s==\'{"fname":],"id":],"city":],"Address":],"price_range":]}\':\n            s=\'{"fname":[],"id":[],"City":[],"Address":[],"price_range":[]}\'\n        return dict(names=s)\n          \ndef entry2():\n\tz=request.args[0]\n\tmessage={}\n\tquery=db(db.theaters.id==int(z)).select()\n\tmessage["movie_id"]=int(z)\n\tmessage["fname"]=query[0].fname\n\tmessage["Address"]=query[0].Address\n\tmessage["city"]=query[0].city\n\tmessage["website"]=query[0].Website\n\tmessage["price_range"]=query[0].price_range\n\tz=query[0].show_time.split("-")\n\t\n\tc=query[0].movie.split(",")\n\t\n\tt=0\n\tl=[]\n\tfor i in c:\n\t\ti=int(i)\n\t\tq=db(db.movie.id==i).select()\n\t\t\n\t\t\n\t\tl.append(q[0])\n\t\tprint q[0].fname\n\t\tt=t+1\n\t#message["limit"]=t\n\t\n\treturn dict(message=message,l=l,z=z)\n\t\n\t\n\n\t#return dict(query=query)\n\t\n\t\t\n\t\t\t\n\t\t\n\t\t    \n\ndef user():\n    """    \n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n""" \n    #mail.send(to=[\'nikhildaliya@gmail.com\'],\n     #     subject=\'hiii\',\n          # If reply_to is omitted, then mail.settings.sender is used\n      #    reply_to=\'nikhil.daliya@students.iiit.ac.in\',\n       #   message=\'Thanks for being part of our Family\'\n        #  )\n   \n    return dict(form=auth())\n\n\n@auth.requires_login()\ndef create():\n\t#mail.send(to=[auth.user.email],\n        #subject=\'Thanks@DNS\',\n        # If reply_to is omitted, then mail.settings.sender is used\n        #reply_to=\'nikhil.daliya@students.iiit.ac.in\',\n        #message=\'Thanks for sharing data with our site\'\n        #)\n\n\t\n\tresponse.flash=\'this is create page\'\n\tform=SQLFORM(db.general_info)\n\t\n\tif form.process().accepted:\n\t\tmail.send(to=[auth.user.email],\n        \tsubject=\'@DNS\',\n        \t# If reply_to is omitted, then mail.settings.sender is used\n        \treply_to=\'nikhildaliya@gmail.com\',\n        \tmessage=\'Thanks for sharing data with our site\'\n        \t)\n\n\t\tresponse.flash=\'form accepted\'\n\t\t\n\t\tredirect(URL(\'index\'))\t\n\telif form.errors:\n\t\tresponse.flash=\'please correct\'\n\t\n        return dict(form=form)\n\n@auth.requires_login()\ndef share_image():\n  form=SQLFORM(db.images)\n  if form.process().accepted:\n      \n      my=(db.images.id==form.vars.id)\n      my=db(my)\n      \n      my.update(place_id=request.args[0])\n      my.update(person=auth.user.id)\n      my.update(per=auth.user.first_name+" "+auth.user.last_name+" , "+auth.user.city)\n      my.update(profile_pic=auth.user.image)\n      \n      response.flash="thanks"\n      redirect(URL(\'entry\',args=request.args))\n      \n  else:\n      response.flash="try again"\n  return dict(form=form)\n  \n   \n\t\n@auth.requires_login()\ndef make_your_comment():\n\tz=int(request.args[0])\n\tq=db(db.general_info.id==z).select()\n\t\n        if request.vars:\n\t\t  m="abc"\n\t\t  import time\n\t\t  t=str(time.strftime("%M %H %d %m %Y"))\n\t\t  \n\n\t\t  if type(request.vars.comment)==str and request.vars.review!="" and request.vars.comment!="":\n\t\t\n\t\t\tdb.reviews.insert(place_id=z,person=auth.user.id,commen=request.vars.comment,review=request.vars.review,image=auth.user.image,datei=t)\n\t\t\tresponse.flash="thanks for your valuable comments"\n\t\t\tmail.send(to=[q[0].Email_id],\n        \t\tsubject=\'The comments@DNS\',\n        \t\n        \t\treply_to=\'nikhil.daliya@students.iiit.ac.in\',\n        \t\tmessage=auth.user.first_name+" "+auth.user.last_name+","+auth.user.city+" commented on your restaurent comment:"+request.vars.comment+" and  rating by him is:"+ str(request.vars.review))\n\n                        redirect(URL(\'entry\',args=request.args))\n\t\t\treturn dict(Result="Fields are filled properly!!")\n\t\t  else:\n\t\t\treturn dict(Result="Please complete fields")\n\telse:\n\t\t  return dict(Result="Please complete required fields")\t\n@auth.requires_login()\ndef make_comment():\n        z=int(request.args[0])\n        q=db(db.movie.id==z).select()\n\n        if request.vars:\n                  m="abc"\n                  import time\n                  t=str(time.strftime("%M %H %d %m %Y"))\n\n\n                  if type(request.vars.comment)==str and request.vars.review!="" and request.vars.comment!="":\n\n                        db.com_movie.insert(place_id=z,person=auth.user.id,commen=request.vars.comment,review=request.vars.review,image=auth.user.image,datei=t)\n                        response.flash="thanks for your valuable comments"\n                        #mail.send(to=[q[0].Email_id],\n                        #subject=\'The comments@DNS\',\n\n                        #reply_to=\'nikhil.daliya@students.iiit.ac.in\',\n                        #message=auth.user.first_name+" "+auth.user.last_name+","+auth.user.city+" commented on your restaurent comment:"+request.vars.comment+" and  rating by him is:"+ str(request.vars.review))\n\n                        redirect(URL(\'movie\',args=request.args))\n                        return dict(Result="Fields are filled properly!!")\n                  else:\n                        return dict(Result="Please complete fields")\n        else:\n                  return dict(Result="Please complete required fields")\ndef movie():\n\tz=int(request.args[0])\n\timport time\n\tquery=db(db.movie.id==z).select()\n\tc=query[0].duration.split(":")\n\tprint query\n\tti=str(time.strftime("%M %H %d %m %Y"))\n        ti=ti.split(" ")\n\tcomments=db(db.com_movie.place_id==z).select()\n\tprint comments\n\tcomment_list=[]\n\tcal=float(query[0].rating)\n\tno=1\n\tfor j in comments:\n\n                                                comment_dict={}\n\n                                                t=db(db.auth_user.id==int(j.person)).select()\n\n\n                                                comment_dict["person"]=t[0].first_name+" "+t[0].last_name+","+t[0].city\n                                                comment_dict["review"]=j.review\n                                                comment_dict["comment"]=j.commen\n                                                comment_dict["image"]=j.image\n\t\t\t\t\t\tcomment_dict["id"]=j.person\n                                                temp=j.review\n                                                temp=float(temp)\n                                                cal=cal+temp\n                                                no=no+1\n                                                \n                                                \n\n\n\n                                                y=str(j.datei)\n                                                y=y.split(" ")\n\n\n                                                if int(ti[4])!=int(y[4]):\n                                                        ans=str(int(ti[4])-int(y[4]))+" years ago"\n                                                elif int(ti[3])!=int(y[3]):\n                                                        ans=str(int(ti[3])-int(y[3]))+" months ago "\n                                                elif int(ti[2])!=int(y[2]):\n                                                        ans=str(int (ti[2])-int(y[2]))+" days ago"\n                                                elif int(ti[1])!=int(y[1]):\n                                                        ans=str(int (ti[1])-int(y[1]))+" hours ago"\n                                                else:\n                                                        ans=str(int(ti[0])-int(y[0]))+ " minutes ago"\n                                                comment_dict["time"]=ans\n\t\t\t\n\t\t\t\t\t\tcomment_list.append(comment_dict)\n\t\t\t\n\tcal=cal/no\n\n\n\treturn dict(query=query,comment_list=comment_list,cal=cal,c=c)\n\n\ndef entry():\n\t\n\t\n\tz=int(request.args[0])\n\t\n\t\n\tcomment_list=[]\n\tmessage={}\n\trows=db(db.general_info.id==z).select()\n        comments=db(db.reviews.place_id==z).select()\n\timport time\n\tti=str(time.strftime("%M %H %d %m %Y"))\n\tti=ti.split(" ")\n\t\n\t\n\t\n        \n\n        \n        \n        \n        \n\n                     \n\t\n                        \n\t\t\t\t\n\tfor i in rows:                          \n\t\tcal=i.Ratings\n\t\tcal=float(cal)\n\t\tno=1\n\t\tno=float(no)        \n        \tmessage["Address"]=i.Address\n\t\tmessage["fname"]=i.fname\n\t\tmessage["city"]=i.city\n\t\tmessage["place_id"]=i.id\n\t\tmessage["menu"]=i.menu\n\t\t#print message["place_id"]\n                pictures=db(db.images.place_id==i.id).select()\n                                \n\t\t\t\t\n\t\t\t\t\n\t\tciti=i.city\n\t\tk=i.fname\n\t\tk=k.lower()\n                message["Email_id"]=i.Email_id\n                message["Phone"]=i.Phone\n\t\tif i.Pure_Veg==True:\n\t\t\tmessage["Pure_Veg"]="Pure Veg"\n\t\telse:\n\t\t\tmessage["Pure_Veg"]="Veg + Non-Veg"\n\t\t\n\tfor j in comments:\n\t\n                                                comment_dict={}\n\t\t\t\t\t\t\n\t\t\t\t\t\tt=db(db.auth_user.id==int(j.person)).select()\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n                                                comment_dict["person"]=t[0].first_name+" "+t[0].last_name+","+t[0].city\n                                                comment_dict["review"]=j.review\n\t\t\t\t\t\tcomment_dict["comment"]=j.commen\t\t\t\t\t\t\n\t\t\t\t\t\tcomment_dict["image"]=j.image\n\t\t\t\t\t\ttemp=j.review\n\t\t\t\t\t\ttemp=float(temp)\n\t\t\t\t\t\tcal=cal+temp\n\t\t\t\t\t\tno=no+1\n\t\t\t\t\t\tprint("hiii")\n\t\t\t\t\t\tprint ti\t\n\t\t\t\t\t\tprint type(ti)\t\n                                                #ti=ti.split(" ")\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\ty=str(j.datei)\n\t\t\t\t\t\ty=y.split(" ")\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tif int(ti[4])!=int(y[4]):\n\t\t\t\t\t\t\tans=str(int(ti[4])-int(y[4]))+" years ago"\n\t\t\t\t\t\telif int(ti[3])!=int(y[3]):\n\t\t\t\t\t\t\tans=str(int(ti[3])-int(y[3]))+" months ago "\n\t\t\t\t\t\telif int(ti[2])!=int(y[2]):\n\t\t\t\t\t\t\tans=str(int (ti[2])-int(y[2]))+" days ago"\n\t\t\t\t\t\telif int(ti[1])!=int(y[1]):\n\t\t\t\t\t\t\tans=str(int (ti[1])-int(y[1]))+" hours ago"\n\t\t\t\t\t\telse: \n\t\t\t\t\t\t\tans=str(int(ti[0])-int(y[0]))+ " minutes ago"\n                                                comment_dict["time"]=ans\n\n                                                comment_list.append(comment_dict)\n\tnearby_places=[]\n\tcomment_list.reverse()\n\tm=citi.lower()\n\tquery=(db.general_info.city.lower()==m)&(db.general_info.id!=z)\n        trail=db(query).select()\n\t\n\t\n\t\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\n\n\n\n\n  \n        cal=cal/no\n\tcal=int(cal*10)/10.0                  \n\tmessage \n\tmessage["Ratings"]=cal\n        \n\n                                \n\n\treturn dict(message=message,comment_list=comment_list,nearby_places=trail,pictures=pictures)\n\n   \n\ndef get_search():\n        text=request.vars[\'p\'].lower()\n        rows=db((db.general_info.fname.lower().startswith(text)) | (db.general_info.city.lower().startswith(text))).select(orderby=db.general_info.Ratings)\n        s=\'{"fname":[\'\n\tfor row in rows:\n\t    print row\n            s=s+\'"\'+row[\'fname\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\ts=s+\'"id":[\'\n\tfor row in rows:\n            s=s+\'"\'+str(row[\'id\'])+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\t\n\ts=s+\'"City":[\'\n\tfor row in rows:\n            s=s+\'"\'+row[\'city\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\t\n\ts=s+\'"Address":[\'\n\tfor row in rows:\n            s=s+\'"\'+row[\'Address\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\ts=s+\'"Phone":[\'\n\tfor row in rows:\n            s=s+\'"\'+row[\'Phone\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\ts=s+\'"Email_id":[\'\n\tfor row in rows:\n\t    s=s+\'"\'+row[\'Email_id\']+\'"\'+","\n\ts=s[0:-1]+\'],\'\n\t\n\t\n\ts=s+\'"Ratings":[\'\n\tfor row in rows:\n            s=s+\'"\'+row[\'Ratings\']+\'"\'+","\n\ts=s[0:-1]+\']}\'\n \n        if s==\'{"fname":],"id":],"City":],"Address":],"Phone":],"Email_id":],"Ratings":]}\':\n            s=\'{"fname":[],"id":[],"City":[],"Address":[],"Phone":[],"Email_id":[],"Ratings":[]}\'\n        return dict(names=s)\n          \n\n\ndef index2():\n   return dict()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n@auth.requires_login()\ndef my_activity():\n\tmessage={}\n\tmessage["image"]=auth.user.image\n\n\tmessage["first_name"]=auth.user.first_name\n\tmessage["last_name"]=auth.user.last_name\n        message["email"]=auth.user.email\n        message["address"]=auth.user.address\n        \n        message["city"]=auth.user.city\n        message["phone"]=auth.user.phone\n\tcomment=db(db.reviews.person==auth.user.id).select()\n\tcomment_list=[]\n\tfor i in comment:\n\t\tplace=db(db.general_info.id==i.place_id).select()\n\t\t\n\t\tinfo={}\n\t\tfor j in place:\n\t\t\tm=str(j.fname)\n\t\t\tm=m +", "+str(j.city)\n\t\t\tinfo["place"]=m\n\t\t\tinfo["place_id"]=j.id\n\t\t\t\n\t\tinfo["commenti"]=i.commen\n\t\tinfo["review"]=i.review\n\t\tcomment_list.append(info)\n\tphoto=[]\n\tphotos=db(db.images.person==auth.user.id).select()\n\tfor i in photos:\n\t\tplace=db(db.general_info.id==i.place_id).select()\n\t\tinfo={}\n\t\tfor j in place:\n\t\t\tm=str(j.fname)\n\t\t\tm=m+" , "+str(j.city)\n\t\t\tinfo["place"]=m\n\t\t\tinfo["place_id"]=j.id\n\t\tinfo["picture"]=i.picture\n\t\tprint info["place"]\n\t\tphoto.append(info)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\treturn dict(message=auth.user,comment_list=comment_list,photo=photo)\n\n\n#def pict_info():\n#\tz=request.args[0]\n#\tquery=db(db.theaters.id==z).select()\n#\treturn dict(query)\n\n#def pict_search():\n#\tz=request.args[0].lower()\n#\tk=requ\n#\tquery=(db.theaters.movie1.lower()==z|\n\n\t\n\t\ndef main():\n     return dict()\n\n\nresponse._vars=response._caller(movie)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sourav/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/sourav/web2py/applications/nikhil/controllers/default.py", line 578, in <module>\n  File "/home/sourav/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/sourav/web2py/applications/nikhil/controllers/default.py", line 254, in movie\n    z=int(request.args[0])\nValueError: invalid literal for int() with base 10: \'None\'\n'
p11
s.