(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'gallery'"
p3
sS'layer'
p4
S'/home/nikhil/Desktop/itws project/web2py/applications/nikhil/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\n#db(db.constants.id>0).insert(t="")\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    """\n    notes=db(db.general_info).select(orderby=db.general_info.Ratings)\n    """\n    flag=0\n    \n    \n    \n    rows=db(db.general_info.id>0).select()\n    comments=db(db.reviews.id>0).select()\n    \n    #print rows\n    message=[]\n    if request.vars:\n\tflag=1\n\t\n\t#db(db.constants).update(t=request.vars.text)\n\t#e=db(db.constants.id>0).select()\n\n\t\n    \tfor i in rows:\n\t\t\n\t\t\t"""\n\t\t\tif len(i.fname)>1:\n\t\t\t\tadder=""\n\t\t\tfor k in i.fname:\n\t\t\t\tadder=adder+"+"+k\n\t\t\t"""\n\t\t\t\n\t\t\tj=request.vars.text\n\t\t\tj=j.lower()\n\t\t\tk=i.fname\n\t\t\tk=k.lower()\n\t\t\tm=i.city\n\t\t\tm=m.lower()\n\t\t\t#message=[]\n\t\t\tif (k)==(j) or m==j:\n\t\t\t\t\n\t\t\t\tflag=2\n\t\t\t\tinfo={}\n\t\t            \n\n\t\t\t\tinfo["id"]=i.id\n\t\t\t\tinfo["fname"]=i.fname\n\t\t\t\tinfo["city"]=i.city\n\t\t\t\tmessage.append(info)\n\t\n\tif flag==2:\n\t\tflag=0\n\t\treturn dict(message=message)\n\t\t\t\t\n\n    \telse:\n\t\t\t\treturn dict(message="Entry not available")\n    else:\n\t\n\t    return dict(message="")\n    \n\ndef user():\n    """    \n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n"""    \n    return dict(form=auth())\n\n\n\ndef create():\n\t\n\tresponse.flash=\'this is create page\'\n\tform=SQLFORM(db.general_info)\n\t\n\tif form.process().accepted:\n\t\tresponse.flash=\'form accepted\'\t\n\telif form.errors:\n\t\tresponse.flash=\'please correct\'\n\t\n        return dict(form=form)\n#\tif request.vars:\n#\t\tprint request.vars.text1\n#\t\tprint "hiii"\n#\t\tdb.general_info.insert(fname=request.vars.text1,Email_id=request.vars.text2)\n#\t\tredirect("index")\n#\t\treturn dict()\n#\telse:\n#\n#\t\treturn dict()\n\t\n\t\n\ndef make_your_comment():\n#\tresponse.flash="Post your comments here"\n#\tform=SQLFORM(db.reviews)\n#\t\n#\tif form.process().accepted:\n#\t\tresponse.flash= "Thanks for your valuable comment!!"\n#\telse:\n#\t\tresponse.flash="Please fill it again."\n#\treturn dict(form=form)\n\tprint request.args[0]\n\tprint "hello"\n\tz=int(request.args[0])\n        if request.vars:\n\t\t  #z=""\n        \t  #e=db(db.constants.id>0).select()\n        \t  #for m in e:\n                  #\tz=z+m.t\n\t          m="abc"\n\t\t  print z\n\t\t  print m\n\t\t  print request.vars.comment\n\t\t  print request.vars.review\n\t\t  print type(request.vars.review)\n\n\t\t  if type(request.vars.comment)==str and request.vars.review!="" and request.vars.comment!="":\n\t\t\t\n\t\t\tdb.reviews.insert(place_id=z,person=m,comment=request.vars.comment,review=request.vars.review)\n\t\t\tresponse.flash="thanks for your valuable comments"\n\t\t\treturn dict(Result="Fields are filled properly!!")\n\t\t  else:\n\t\t\treturn dict(Result="Please complete fields")\n\telse:\n\t\t  return dict(Result="Please complete required fields")\n\t\n\ndef edit():\n\tresponse.flash=\'this is edit page\'\n\tnote=db.general_info(request.args(0))\n\tform=SQLFORM(db.general_info,note,deletable=True)\n\tif form.validate():\n\t\tif form.deleted:\n\t\t\tdb(db.general_info.id==note.id).delete()\n\t\t\tredirect(URL(index))\n\t\telse:\n\t\t\tnote.update_record(**dict(form.vars))\n\t\t\tresponse.flash="Record changed"\n\telse:\n\t\tresponse.flash="something went wrong"\n\t\n\t\n\t\n\t\n\treturn dict(form=form)\n\n\ndef search():\n\tfor i in db.general_info():\n\t\tif request.vars.name==i.name:\n\t\t\tredirect\n\t\t\treturn dict(message=db.general_info.i)\n\ndef entry():\n\t#z=""\n\t#e=db(db.constants.id>0).select()\n\t#for m in e:\n\t#      \tz=z+m.t \n\t#\tprint  z\n\t#z=z.lower()\n\t#print z\n\t#print "tyuiorrr"\n\tprint request.args\n\tz=int(request.args[0])\n\tprint z\n\t\n\tcomment_list=[]\n\tmessage={}\n\trows=db(db.general_info.id>0).select()\n        comments=db(db.reviews.id>0).select()\n\tpictures=db(db.gallery.id>0).select()\n\n        \n        \n        \n        for i in rows:\n\n                     \n\n                        if i.id==z:\n\t\t\t\t\n                                \n                         \tcal=i.Ratings\n\t\t\t\tcal=float(cal)\n\t\t\t\tno=1\n\t\t\t\tno=float(no)        \n                                message["Address"]=i.Address\n\t\t\t\tmessage["fname"]=i.fname\n\t\t\t\tmessage["city"]=i.city\n\t\t\t\tmessage["place_id"]=i.id\n\t\t\t\tprint message["place_id"]\n\t\t\t\tciti=i.city\n\t\t\t\tk=message["fname"]\n\t\t\t\tk=k.lower()\n                                message["Email_id"]=i.Email_id\n                                message["Phone"]=i.Phone\n\t\t\t\tbreak;\n\tfor j in comments:\n\t\t\tm=j.place_id\n\t\t\tm=int(m)\n\t\t\tprint z\t\n                        if m==z:\n\t\t\t\t\t\tprint "hello"\n                                                comment_dict={}\n                                                comment_dict["person"]=j.person\n                                                comment_dict["review"]=j.review\n\t\t\t\t\t\tcomment_dict["comment"]=j.comment\n\t\t\t\t\t\ttemp=j.review\n\t\t\t\t\t\ttemp=float(temp)\n\t\t\t\t\t\tcal=cal+temp\n\t\t\t\t\t\tno=no+1\n                                                """\n                                                if j.date_made:\n                                                        t=tuple(j.date_made)\n                                                else:\n                                                        t=None\n                                                 if t:\n                                                        comment_dict["time elapsed"]=t[1]\n                                                else:\n                                                        comment_dict["time_elapsed"]=None\n                                                """\n                                                comment_dict["time"]=j.date_made\n\n                                                comment_list.append(comment_dict)\n\tpicture_list=[]\n\tfor j in pictures:\n\t\t\tm=j.place\n\t\t\tm=m.lower()\n\t\t\tif m==k:\n\t\t\t\tpicture_list.append(j.image)\n\tnearby_places=[]\n\t\n\tm=citi.lower()\n\tprint "qwertyu"\n\tprint m\n\tfor y in rows:\n\t\tz=y.city\n\t\tz=z.lower()\n\t\tif z==m and i.id!=y.id:\n\t\t\t\t\t\tnear_places={}\n\t\t\t\t\t\tnear_places["fname"]=y.fname\n\t\t\t\t\t\tnear_places["place_id"]=y.id\n\t\t\t\t\t\tnear_places["Phone"]=y.Phone\n\t\t\t\t\t\tnear_places["Email_id"]=y.Email_id\n\t\t\t\t\t\tnearby_places.append(near_places)\n\n\t\t\t\t\t\t\n\n\n\n\n\n  \n        cal=cal/no\n\tcal=int(cal*10)/10.0                  \n\tmessage \n\tmessage["Ratings"]=cal\n        \n\n                                \n\n\treturn dict(message=message,comment_list=comment_list,picture_list=picture_list,nearby_places=nearby_places)\n\n   \n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    \n\n\n\nresponse._vars=response._caller(entry)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nikhil/Desktop/itws project/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/nikhil/Desktop/itws project/web2py/applications/nikhil/controllers/default.py", line 333, in <module>\n  File "/home/nikhil/Desktop/itws project/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nikhil/Desktop/itws project/web2py/applications/nikhil/controllers/default.py", line 201, in entry\n    pictures=db(db.gallery.id>0).select()\n  File "/home/nikhil/Desktop/itws project/web2py/gluon/dal.py", line 8329, in __getattr__\n    return ogetattr(self, key)\nAttributeError: \'DAL\' object has no attribute \'gallery\'\n'
p11
s.