(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'message' is not defined"
p3
sS'layer'
p4
S'/home/nikhil/Desktop/itws project/web2py/applications/nikhil/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    """\n    notes=db(db.general_info).select(orderby=db.general_info.Ratings)\n    """\n    flag=0\n    rows=db(db.general_info.id>0).select()\n    comments=db(db.reviews.id>0).select()\n    comment_list=[]\n    message={}\n    print rows\n    if request.vars:\n\tflag=1\n    \tfor i in rows:\n\t\t\n\t\t\t"""\n\t\t\tif len(i.fname)>1:\n\t\t\t\tadder=""\n\t\t\tfor k in i.fname:\n\t\t\t\tadder=adder+"+"+k\n\t\t\t"""\n\t\t\tprint i.fname\n\t\t\n\t\t\tflag=3\n\t\t\tif (i.fname).split()==(request.vars.text).split():\n\t\t\t\tflag=2\n\t\t\t\tmessage["Address"]=i.Address\n\t\t\t\tmessage["Email_id"]=i.Email_id\n\t\t\t\tmessage["Phone"]=i.Phone\n                 \t\tfor j in comments:\n\t\t\t\t\tif j.place==i.fname:\n\t\t\t\t\t\tcomment_dict={}\n\t\t\t\t\t\tcomment_dict["person"]=j.person\n\t\t\t\t\t\tcomment_dict["review"]=j.review\n\t\t\t\t\t\t"""\n\t\t\t\t\t\tif j.date_made:\n\t\t\t\t\t\t\tt=tuple(j.date_made)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tt=None\n\t\t\t\t\t\tif t:\n\t\t\t\t\t\t\tcomment_dict["time elapsed"]=t[1]\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tcomment_dict["time_elapsed"]=None\n\t\t\t\t\t\t"""\n\t\t\t\t\t\tcomment_dict["time"]=j.date_made\n\t\t\t\t\t\t\n\t\t\t\t\t\tcomment_list.append(comment_dict)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\tif flag==3:\t\n\t\t\t\tflag=0\n                \t\treturn dict(message=message)\n\telif flag==1:\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tflag=0\n\t\t\t\treturn dict(Search_Results="Entry not available")\n\telif flag==2:\n\t\t\t\tflag=0\n\t\t\t\tredirect(URL(request.application, \'default\', \'entry\'))\n\n\t\t\t\t\n\t\t\t\treturn dict(message=message,comment_list=comment_list)\n\n    else:\n\t\t\t\treturn dict()\n\t\t\n    """\n    return dict(message=notes)\n    """\n\ndef user():\n    """    \n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n"""    \n    return dict(form=auth())\n\ndef create():\n\t\n\tresponse.flash=\'this is create page\'\n\tform=SQLFORM(db.general_info)\n\tif form.process().accepted:\n\t\tresponse.flash=\'form accepted\'\n\telif form.errors:\n\t\tresponse.flash=\'please correct\'\n        return dict(form=form)\n\ndef make_your_comment():\n\tresponse.flash="Post your comments here"\n\tform=SQLFORM(db.reviews)\n\t\n\tif form.process().accepted:\n\t\tresponse.flash= "Thanks for your valuable comment!!"\n\telse:\n\t\tresponse.flash="Please fill it again."\n\t\n\treturn dict(form=form)\n\t\n\ndef edit():\n\tresponse.flash=\'this is edit page\'\n\tnote=db.general_info(request.args(0))\n\tform=SQLFORM(db.general_info,note,deletable=True)\n\tif form.validate():\n\t\tif form.deleted:\n\t\t\tdb(db.general_info.id==note.id).delete()\n\t\t\tredirect(URL(index))\n\t\telse:\n\t\t\tnote.update_record(**dict(form.vars))\n\t\t\tresponse.flash="Record changed"\n\telse:\n\t\tresponse.flash="something went wrong"\n\t\n\t\n\t\n\t\n\treturn dict(form=form)\n\n\ndef search():\n\tfor i in db.general_info():\n\t\tif request.vars.name==i.name:\n\t\t\tredirect\n\t\t\treturn dict(message=db.general_info.i)\n\ndef entry():\n\treturn dict(message=message,comment_list=comment_list)\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(entry)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nikhil/Desktop/itws project/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/nikhil/Desktop/itws project/web2py/applications/nikhil/controllers/default.py", line 196, in <module>\n  File "/home/nikhil/Desktop/itws project/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nikhil/Desktop/itws project/web2py/applications/nikhil/controllers/default.py", line 159, in entry\n    return dict(message=message,comment_list=comment_list)\nNameError: global name \'message\' is not defined\n'
p11
s.